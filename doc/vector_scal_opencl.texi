/*
 * This example complements vector_scale.c: here we implement a OpenCL version.
 */

#include <starpu.h>
#include <starpu_opencl.h>

extern struct starpu_opencl_codelet codelet;

void scal_opencl_func(void *buffers[], void *_args)
@{
    float *factor = (float *)_args;
    struct starpu_vector_interface_s *vector = (struct starpu_vector_interface_s *) buffers[0];
    int id, devid, err;
    cl_kernel kernel;
    cl_command_queue queue;

    /* length of the vector */
    unsigned n = STARPU_GET_VECTOR_NX(vector);
    /* local copy of the vector pointer */
    float *val = (float *)STARPU_GET_VECTOR_PTR(vector);

    id = starpu_worker_get_id();
    devid = starpu_worker_get_devid(id);

    err = starpu_opencl_load_kernel(&kernel, &queue, &codelet, "vector_mult_opencl", devid);
    if (err != CL_SUCCESS) STARPU_OPENCL_REPORT_ERROR(err);

    err = 0;
    err = clSetKernelArg(kernel, 0, sizeof(cl_mem), &val);
    err = clSetKernelArg(kernel, 1, sizeof(int), &n);
    err |= clSetKernelArg(kernel, 2, sizeof(float), (void*)factor);
    if (err) STARPU_OPENCL_REPORT_ERROR(err);

    @{
        size_t global=n;
        size_t local=n;
        err = clEnqueueNDRangeKernel(queue, kernel, 1, NULL, &global, &local, 0, NULL, NULL);
        if (err != CL_SUCCESS) STARPU_OPENCL_REPORT_ERROR(err);
    @}

    clFinish(queue);

    starpu_opencl_release_kernel(kernel);
@}
